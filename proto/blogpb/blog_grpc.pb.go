// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.26.0
// source: proto/blogpb/blog.proto

package blogpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogService_Login_FullMethodName                  = "/blog.BlogService/Login"
	BlogService_LogOut_FullMethodName                 = "/blog.BlogService/LogOut"
	BlogService_Register_FullMethodName               = "/blog.BlogService/Register"
	BlogService_GetAllUsers_FullMethodName            = "/blog.BlogService/GetAllUsers"
	BlogService_GetUsersByID_FullMethodName           = "/blog.BlogService/GetUsersByID"
	BlogService_DeleteUserByID_FullMethodName         = "/blog.BlogService/DeleteUserByID"
	BlogService_GetAllBlogs_FullMethodName            = "/blog.BlogService/GetAllBlogs"
	BlogService_InsertBlog_FullMethodName             = "/blog.BlogService/InsertBlog"
	BlogService_DeleteBlogByID_FullMethodName         = "/blog.BlogService/DeleteBlogByID"
	BlogService_InsertCommentsByBlogID_FullMethodName = "/blog.BlogService/InsertCommentsByBlogID"
	BlogService_DeleteComments_FullMethodName         = "/blog.BlogService/DeleteComments"
	BlogService_DeleteAllComments_FullMethodName      = "/blog.BlogService/DeleteAllComments"
)

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	// users spec
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	LogOut(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetAllUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUsersByID(ctx context.Context, in *UserByIDRequest, opts ...grpc.CallOption) (*UserByIDResponse, error)
	DeleteUserByID(ctx context.Context, in *DeleteUserByIDRequest, opts ...grpc.CallOption) (*DeleteUserByIDResponse, error)
	// blog spec
	GetAllBlogs(ctx context.Context, in *AllBlogsRequest, opts ...grpc.CallOption) (*AllBlogsResponse, error)
	InsertBlog(ctx context.Context, in *InsertBlogRequest, opts ...grpc.CallOption) (*InsertBlogResponse, error)
	DeleteBlogByID(ctx context.Context, in *DeleteBlogByIDRequest, opts ...grpc.CallOption) (*DeleteBlogByIDResponse, error)
	InsertCommentsByBlogID(ctx context.Context, in *InsertCommentByBlogIDRequest, opts ...grpc.CallOption) (*InsertCommentByBlogIDResponse, error)
	DeleteComments(ctx context.Context, in *DeleteCommentByBlogIDRequest, opts ...grpc.CallOption) (*DeleteCommentByBlogIDResponse, error)
	DeleteAllComments(ctx context.Context, in *DeleteAllCommentsRequest, opts ...grpc.CallOption) (*DeleteAllCommentsResponse, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, BlogService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) LogOut(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, BlogService_LogOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, BlogService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetAllUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, BlogService_GetAllUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetUsersByID(ctx context.Context, in *UserByIDRequest, opts ...grpc.CallOption) (*UserByIDResponse, error) {
	out := new(UserByIDResponse)
	err := c.cc.Invoke(ctx, BlogService_GetUsersByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteUserByID(ctx context.Context, in *DeleteUserByIDRequest, opts ...grpc.CallOption) (*DeleteUserByIDResponse, error) {
	out := new(DeleteUserByIDResponse)
	err := c.cc.Invoke(ctx, BlogService_DeleteUserByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetAllBlogs(ctx context.Context, in *AllBlogsRequest, opts ...grpc.CallOption) (*AllBlogsResponse, error) {
	out := new(AllBlogsResponse)
	err := c.cc.Invoke(ctx, BlogService_GetAllBlogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) InsertBlog(ctx context.Context, in *InsertBlogRequest, opts ...grpc.CallOption) (*InsertBlogResponse, error) {
	out := new(InsertBlogResponse)
	err := c.cc.Invoke(ctx, BlogService_InsertBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteBlogByID(ctx context.Context, in *DeleteBlogByIDRequest, opts ...grpc.CallOption) (*DeleteBlogByIDResponse, error) {
	out := new(DeleteBlogByIDResponse)
	err := c.cc.Invoke(ctx, BlogService_DeleteBlogByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) InsertCommentsByBlogID(ctx context.Context, in *InsertCommentByBlogIDRequest, opts ...grpc.CallOption) (*InsertCommentByBlogIDResponse, error) {
	out := new(InsertCommentByBlogIDResponse)
	err := c.cc.Invoke(ctx, BlogService_InsertCommentsByBlogID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteComments(ctx context.Context, in *DeleteCommentByBlogIDRequest, opts ...grpc.CallOption) (*DeleteCommentByBlogIDResponse, error) {
	out := new(DeleteCommentByBlogIDResponse)
	err := c.cc.Invoke(ctx, BlogService_DeleteComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteAllComments(ctx context.Context, in *DeleteAllCommentsRequest, opts ...grpc.CallOption) (*DeleteAllCommentsResponse, error) {
	out := new(DeleteAllCommentsResponse)
	err := c.cc.Invoke(ctx, BlogService_DeleteAllComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility
type BlogServiceServer interface {
	// users spec
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	LogOut(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetAllUsers(context.Context, *UserRequest) (*UserResponse, error)
	GetUsersByID(context.Context, *UserByIDRequest) (*UserByIDResponse, error)
	DeleteUserByID(context.Context, *DeleteUserByIDRequest) (*DeleteUserByIDResponse, error)
	// blog spec
	GetAllBlogs(context.Context, *AllBlogsRequest) (*AllBlogsResponse, error)
	InsertBlog(context.Context, *InsertBlogRequest) (*InsertBlogResponse, error)
	DeleteBlogByID(context.Context, *DeleteBlogByIDRequest) (*DeleteBlogByIDResponse, error)
	InsertCommentsByBlogID(context.Context, *InsertCommentByBlogIDRequest) (*InsertCommentByBlogIDResponse, error)
	DeleteComments(context.Context, *DeleteCommentByBlogIDRequest) (*DeleteCommentByBlogIDResponse, error)
	DeleteAllComments(context.Context, *DeleteAllCommentsRequest) (*DeleteAllCommentsResponse, error)
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogServiceServer struct {
}

func (UnimplementedBlogServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBlogServiceServer) LogOut(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedBlogServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBlogServiceServer) GetAllUsers(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedBlogServiceServer) GetUsersByID(context.Context, *UserByIDRequest) (*UserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByID not implemented")
}
func (UnimplementedBlogServiceServer) DeleteUserByID(context.Context, *DeleteUserByIDRequest) (*DeleteUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByID not implemented")
}
func (UnimplementedBlogServiceServer) GetAllBlogs(context.Context, *AllBlogsRequest) (*AllBlogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlogs not implemented")
}
func (UnimplementedBlogServiceServer) InsertBlog(context.Context, *InsertBlogRequest) (*InsertBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertBlog not implemented")
}
func (UnimplementedBlogServiceServer) DeleteBlogByID(context.Context, *DeleteBlogByIDRequest) (*DeleteBlogByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogByID not implemented")
}
func (UnimplementedBlogServiceServer) InsertCommentsByBlogID(context.Context, *InsertCommentByBlogIDRequest) (*InsertCommentByBlogIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCommentsByBlogID not implemented")
}
func (UnimplementedBlogServiceServer) DeleteComments(context.Context, *DeleteCommentByBlogIDRequest) (*DeleteCommentByBlogIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComments not implemented")
}
func (UnimplementedBlogServiceServer) DeleteAllComments(context.Context, *DeleteAllCommentsRequest) (*DeleteAllCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllComments not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_LogOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).LogOut(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetAllUsers(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetUsersByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetUsersByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetUsersByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetUsersByID(ctx, req.(*UserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteUserByID(ctx, req.(*DeleteUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetAllBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetAllBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetAllBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetAllBlogs(ctx, req.(*AllBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_InsertBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).InsertBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_InsertBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).InsertBlog(ctx, req.(*InsertBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteBlogByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteBlogByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteBlogByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteBlogByID(ctx, req.(*DeleteBlogByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_InsertCommentsByBlogID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCommentByBlogIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).InsertCommentsByBlogID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_InsertCommentsByBlogID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).InsertCommentsByBlogID(ctx, req.(*InsertCommentByBlogIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentByBlogIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteComments(ctx, req.(*DeleteCommentByBlogIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteAllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteAllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteAllComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteAllComments(ctx, req.(*DeleteAllCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _BlogService_Login_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _BlogService_LogOut_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _BlogService_Register_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _BlogService_GetAllUsers_Handler,
		},
		{
			MethodName: "GetUsersByID",
			Handler:    _BlogService_GetUsersByID_Handler,
		},
		{
			MethodName: "DeleteUserByID",
			Handler:    _BlogService_DeleteUserByID_Handler,
		},
		{
			MethodName: "GetAllBlogs",
			Handler:    _BlogService_GetAllBlogs_Handler,
		},
		{
			MethodName: "InsertBlog",
			Handler:    _BlogService_InsertBlog_Handler,
		},
		{
			MethodName: "DeleteBlogByID",
			Handler:    _BlogService_DeleteBlogByID_Handler,
		},
		{
			MethodName: "InsertCommentsByBlogID",
			Handler:    _BlogService_InsertCommentsByBlogID_Handler,
		},
		{
			MethodName: "DeleteComments",
			Handler:    _BlogService_DeleteComments_Handler,
		},
		{
			MethodName: "DeleteAllComments",
			Handler:    _BlogService_DeleteAllComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/blogpb/blog.proto",
}
